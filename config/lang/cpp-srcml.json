{
  "extensions": [
	".h",
	".hpp",
	".c",
	".cpp"
  ],
  "parserConfig": {
	"type": "srcml",
	"command": "srcml",
	"language": "C++",
	"tokenTypesWithAttr": {
	  "number_literal": {"literal": {"type": "number"}},
	  "char_literal": {"literal": {"type": "char"}},
	  "string_literal": {"literal": {"type": "string"}},
	  "boolean_literal": {"literal": {"type": "boolean"}},
	  "complex_literal": {"literal": {"type": "complex"}},
	  "null_literal": {"literal": {"type": "null"}}
	},
	"tokenTypes": [
	  "comment",
	  "escape",
	  "operator",
	  "literal"
	],
	"ruleTypesWithAttr": {
	  "elseif": {"if": {"type": "elseif"}},
	  "const_cast": {"cast": {"type": "const"}},
	  "dynamic_cast": {"cast": {"type": "dynamic"}},
	  "reinterpret_cast": {"cast": {"type": "reinterpret"}},
	  "static_cast": {"cast": {"type": "static"}},
	  "class_enum_decl": {"enum_decl": {"type": "class"}},
	  "class_enum": {"enum": {"type": "class"}}
	},
	"ruleTypes": [
	  "unit",
	  "cpp:define",
	  "cpp:directive",
	  "cpp:elif",
	  "cpp:else",
	  "cpp:empty",
	  "cpp:endif",
	  "cpp:error",
	  "cpp:file",
	  "cpp:if",
	  "cpp:ifdef",
	  "cpp:ifndef",
	  "cpp:include",
	  "cpp:line",
	  "cpp:literal",
	  "cpp:macro",
	  "cpp:number",
	  "cpp:pragma",
	  "cpp:undef",
	  "cpp:value",
	  "cpp:warning",
	  "alignas",
	  "alignof",
	  "argument",
	  "argument_list",
	  "asm",
	  "assert",
	  "attribute",
	  "block",
	  "block_content",
	  "break",
	  "call",
	  "capture",
	  "case",
	  "cast",
	  "catch",
	  "class",
	  "class_decl",
	  "condition",
	  "constructor",
	  "constructor_decl",
	  "continue",
	  "control",
	  "decl",
	  "decl_stmt",
	  "decltype",
	  "default",
	  "destructor",
	  "destructor_decl",
	  "do",
	  "else",
	  "empty_stmt",
	  "enum",
	  "enum_decl",
	  "expr",
	  "expr_stmt",
	  "extern",
	  "for",
	  "forever",
	  "friend",
	  "function",
	  "function_decl",
	  "goto",
	  "if",
	  "if_stmt",
	  "incr",
	  "index",
	  "init",
	  "label",
	  "lambda",
	  "member_list",
	  "modifier",
	  "name",
	  "namespace",
	  "noexcept",
	  "omp:argument",
	  "omp:argument_list",
	  "omp:clause",
	  "omp:directive",
	  "omp:expr",
	  "omp:name",
	  "param",
	  "parameter",
	  "parameter_list",
	  "private",
	  "protected",
	  "public",
	  "range",
	  "ref_qualifier",
	  "return",
	  "sizeof",
	  "specifier",
	  "struct",
	  "struct_decl",
	  "super",
	  "super_list",
	  "switch",
	  "template",
	  "ternary",
	  "then",
	  "throw",
	  "try",
	  "type",
	  "typedef",
	  "typeid",
	  "typename",
	  "union",
	  "union_decl",
	  "using",
	  "while"
	]
  },
  "processConfig": {
	"splitConfig": {
	  "splitRules": [
		"function",
		"function_decl",
		"expr_stmt",
		"decl_stmt",
		"while",
		"do",
		"for",
		"if",
		"else",
		"elseif",
		"switch",
		"case",
		"default",
		"break",
		"return",
		"goto",
		"throw"
	  ]
	},
	"normalizeConfig": {
	  "mapping": {
		"string_literal": "\"S\"",
		"char_literal": "'C'",
		"number_literal": "N",
		"complex_literal": "C"
	  },
	  "indexedMapping": {
		"//name[..[@tag!='name' and @tag!='call' and @tag!='type' and @tag!='class' and @tag!='function' and @tag!='function_decl' and @tag!='namespace']]/TOKEN": "$V",
		"//name[./operator='.']/name[position()=1]/TOKEN": "$V",
		"//name[./operator='->']/name[position()=1]/TOKEN": "$V"
	  },
	  "ignoreRules": [
		"cpp:include",
		"using",
		"specifier",
		"public",
		"private",
		"protected",
		"//TOKEN[.='}']",
		"//class/TOKEN[.=';']",
		"//struct/TOKEN[.=';']",
		"//union/TOKEN[.=';']"
	  ]
	}
  }
}
